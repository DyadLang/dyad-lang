// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 1`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 2`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 3`] = `
{
  "code": "@doc Markdown.doc"""
   HasArrays(; name, N, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`N\`         |                          | --  |   5 |
| \`x\`         |                          | --  |    |
"""
@component function HasArrays(; name, N=5, x=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x[1:N]::Float64 = x))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  ### Control Structures
  for i in 1:N
      __defaults[x[i]] = (i)
      push!(__eqs, D(x[i]) ~ -x[i])
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HasArrays

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HasArrays)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 4`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 5`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 6`] = `
{
  "code": "@doc Markdown.doc"""
   MetaArray(; name)
"""
@component function MetaArray(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  arrays = ODESystem[]
  for i in 1:10
    push!(arrays, CommonTests.HasArrays(N=8, name=Symbol("arrays", "_", i)))
  end
  append!(__systems, arrays)

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MetaArray

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MetaArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 7`] = `
{
  "code": "using DyadInterface

using CommonTests: AbstractBogusAnalysisSpec, BogusAnalysisSpec
@kwdef mutable struct BogusAnalysisSpec <: AbstractBogusAnalysisSpec
  name::Symbol = :BogusAnalysis
end

function DyadInterface.run_analysis(spec::BogusAnalysisSpec)
  base_spec = BogusAnalysisSpec(;
    name=:BogusAnalysis
  )
  run_analysis(base_spec)
end

BogusAnalysis(;kwargs...) = run_analysis(BogusAnalysisSpec(;kwargs...))
export BogusAnalysis, BogusAnalysisSpec
export BogusAnalysisSpec, BogusAnalysis",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "BogusAnalysis",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 8`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 9`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 10`] = `
{
  "code": "@doc Markdown.doc"""
   InterpolateFromFile(; name, filename)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`filename\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function InterpolateFromFile(; name, filename=nothing)
  fˍ₋value = dataFromFile(filename)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (filename::String = filename))
  append!(__params, @parameters (f::typeof(fˍ₋value))(..) = fˍ₋value)

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ f(u))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export InterpolateFromFile

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(InterpolateFromFile)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 11`] = `
{
  "code": "@connector function HydraulicPort(; name)
  vars = @variables begin
    p(t), []
    m_dot(t), [connect = Flow]
    h(t), [connect = Stream]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export HydraulicPort",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HydraulicPort",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 12`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 13`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 14`] = `
{
  "code": "@doc Markdown.doc"""
   Reservoir(; name, p0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`p0\`         |                          | Pa  |    |

## Connectors

 * \`port\` - ([\`HydraulicPort\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`rho\`         |                          | kg/m3  | 
"""
@component function Reservoir(; name, p0=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (p0::Float64 = p0))
  append!(__params, @parameters (rho0::Float64 = density(port__medium, p0)))
  append!(__params, @parameters (port__medium::MediumModel = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (rho(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = CommonTests.HydraulicPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # This equation is here just to reference common variables on the connector
  push!(__eqs, rho ~ density(port__medium, port.p))
  push!(__eqs, port.p ~ p0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Reservoir

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Reservoir)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 15`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 16`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 17`] = `
{
  "code": "@doc Markdown.doc"""
   System1(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System1(; name, beta=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (beta::Float64 = beta))
    (medium::MediumModel = Beta(beta=beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System1

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System1)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 18`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 19`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 20`] = `
{
  "code": "@doc Markdown.doc"""
   System2(; name)

This model exists to ensure that we don't get an \`invalidContinuitySet\`
error (which was the case prior to #174)

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named sys = CommonTests.System1())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(sys.flange, flange))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 21`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 22`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 23`] = `
{
  "code": "@doc Markdown.doc"""
   System3(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System3(; name, beta=1, medium=Beta(beta=beta))

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (medium::MediumModel = medium))
  append!(__params, @parameters (beta::Float64 = beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System3

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System3)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 24`] = `
{
  "code": "@kwdef mutable struct InterpolationData
    time::Real
    y::Integer
end

function Base.setproperty!(value::InterpolationData, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::InterpolationData)
  println(io, "[InterpolationData] \\n time=$(x.time) \\n y=$(x.y)")
end

Base.copy(x::InterpolationData) = InterpolationData(x.time, x.y)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::InterpolationData) = [
  model.time => pars.time,
  model.y => pars.y,
]

export InterpolationData
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "InterpolationData",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 25`] = `
{
  "code": "@kwdef mutable struct OptionalNumber__Just
    x::Real
end

function Base.setproperty!(value::OptionalNumber__Just, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Just)
  println(io, "[OptionalNumber__Just] \\n x=$(x.x)")
end

Base.copy(x::OptionalNumber__Just) = OptionalNumber__Just(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Just) = [
  model.x => pars.x,
]

export OptionalNumber__Just

@kwdef mutable struct OptionalNumber__Nothing
end

function Base.setproperty!(value::OptionalNumber__Nothing, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Nothing)
  println(io, "[OptionalNumber__Nothing] \\n ")
end

Base.copy(x::OptionalNumber__Nothing) = OptionalNumber__Nothing()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Nothing) = [
]

export OptionalNumber__Nothing
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "OptionalNumber",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 26`] = `
{
  "generated/BogusAnalysis_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CommonTests: AbstractBogusAnalysisSpec, BogusAnalysisSpec
@kwdef mutable struct BogusAnalysisSpec <: AbstractBogusAnalysisSpec
  name::Symbol = :BogusAnalysis
end

function DyadInterface.run_analysis(spec::BogusAnalysisSpec)
  base_spec = BogusAnalysisSpec(;
    name=:BogusAnalysis
  )
  run_analysis(base_spec)
end

BogusAnalysis(;kwargs...) = run_analysis(BogusAnalysisSpec(;kwargs...))
export BogusAnalysis, BogusAnalysisSpec
export BogusAnalysisSpec, BogusAnalysis
",
  "generated/HasArrays_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   HasArrays(; name, N, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`N\`         |                          | --  |   5 |
| \`x\`         |                          | --  |    |
"""
@component function HasArrays(; name, N=5, x=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x[1:N]::Float64 = x))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  ### Control Structures
  for i in 1:N
      __defaults[x[i]] = (i)
      push!(__eqs, D(x[i]) ~ -x[i])
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HasArrays

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HasArrays)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/HasArrays_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HasArrays_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HydraulicPort_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@connector function HydraulicPort(; name)
  vars = @variables begin
    p(t), []
    m_dot(t), [connect = Flow]
    h(t), [connect = Stream]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export HydraulicPort
",
  "generated/InterpolateFromFile_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   InterpolateFromFile(; name, filename)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`filename\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function InterpolateFromFile(; name, filename=nothing)
  fˍ₋value = dataFromFile(filename)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (filename::String = filename))
  append!(__params, @parameters (f::typeof(fˍ₋value))(..) = fˍ₋value)

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ f(u))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export InterpolateFromFile

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(InterpolateFromFile)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/InterpolateFromFile_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/InterpolateFromFile_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/InterpolationData_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct InterpolationData
    time::Real
    y::Integer
end

function Base.setproperty!(value::InterpolationData, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::InterpolationData)
  println(io, "[InterpolationData] \\n time=$(x.time) \\n y=$(x.y)")
end

Base.copy(x::InterpolationData) = InterpolationData(x.time, x.y)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::InterpolationData) = [
  model.time => pars.time,
  model.y => pars.y,
]

export InterpolationData

",
  "generated/MetaArray_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   MetaArray(; name)
"""
@component function MetaArray(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  arrays = ODESystem[]
  for i in 1:10
    push!(arrays, CommonTests.HasArrays(N=8, name=Symbol("arrays", "_", i)))
  end
  append!(__systems, arrays)

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MetaArray

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MetaArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/MetaArray_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/MetaArray_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/OptionalNumber_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct OptionalNumber__Just
    x::Real
end

function Base.setproperty!(value::OptionalNumber__Just, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Just)
  println(io, "[OptionalNumber__Just] \\n x=$(x.x)")
end

Base.copy(x::OptionalNumber__Just) = OptionalNumber__Just(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Just) = [
  model.x => pars.x,
]

export OptionalNumber__Just

@kwdef mutable struct OptionalNumber__Nothing
end

function Base.setproperty!(value::OptionalNumber__Nothing, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Nothing)
  println(io, "[OptionalNumber__Nothing] \\n ")
end

Base.copy(x::OptionalNumber__Nothing) = OptionalNumber__Nothing()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Nothing) = [
]

export OptionalNumber__Nothing

",
  "generated/Reservoir_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Reservoir(; name, p0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`p0\`         |                          | Pa  |    |

## Connectors

 * \`port\` - ([\`HydraulicPort\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`rho\`         |                          | kg/m3  | 
"""
@component function Reservoir(; name, p0=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (p0::Float64 = p0))
  append!(__params, @parameters (rho0::Float64 = density(port__medium, p0)))
  append!(__params, @parameters (port__medium::MediumModel = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (rho(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = CommonTests.HydraulicPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # This equation is here just to reference common variables on the connector
  push!(__eqs, rho ~ density(port__medium, port.p))
  push!(__eqs, port.p ~ p0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Reservoir

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Reservoir)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Reservoir_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Reservoir_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System1_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System1(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System1(; name, beta=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (beta::Float64 = beta))
    (medium::MediumModel = Beta(beta=beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System1

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System1)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System1_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System1_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System2_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System2(; name)

This model exists to ensure that we don't get an \`invalidContinuitySet\`
error (which was the case prior to #174)

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named sys = CommonTests.System1())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(sys.flange, flange))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System2_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System2_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System3_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System3(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System3(; name, beta=1, medium=Beta(beta=beta))

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (medium::MediumModel = medium))
  append!(__params, @parameters (beta::Float64 = beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System3

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System3)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System3_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System3_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("HasArrays_definition.jl")
include("MetaArray_definition.jl")
include("BogusAnalysis_definition.jl")
include("InterpolateFromFile_definition.jl")
include("HydraulicPort_definition.jl")
include("Reservoir_definition.jl")
include("System1_definition.jl")
include("System2_definition.jl")
include("System3_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("HasArrays_experiment.jl")
include("MetaArray_experiment.jl")
include("InterpolateFromFile_experiment.jl")
include("Reservoir_experiment.jl")
include("System1_experiment.jl")
include("System2_experiment.jl")
include("System3_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("HasArrays_test.jl")
include("MetaArray_test.jl")
include("InterpolateFromFile_test.jl")
include("Reservoir_test.jl")
include("System1_test.jl")
include("System2_test.jl")
include("System3_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit

include("InterpolationData_type.jl")
include("OptionalNumber_type.jl")",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 27`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 28`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 29`] = `
{
  "code": "@doc Markdown.doc"""
   HasArrays(; name, N, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`N\`         |                          | --  |   5 |
| \`x\`         |                          | --  |    |
"""
@component function HasArrays(; name, N=5, x=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x[1:N]::Float64 = x))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  ### Control Structures
  for i in 1:N
      __defaults[x[i]] = (i)
      push!(__eqs, D(x[i]) ~ -x[i])
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HasArrays

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HasArrays)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HasArrays",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 30`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 31`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 32`] = `
{
  "code": "@doc Markdown.doc"""
   MetaArray(; name)
"""
@component function MetaArray(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  arrays = ODESystem[]
  for i in 1:10
    push!(arrays, CommonTests.HasArrays(N=8, name=Symbol("arrays", "_", i)))
  end
  append!(__systems, arrays)

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MetaArray

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MetaArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "MetaArray",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 33`] = `
{
  "code": "using DyadInterface

using CommonTests: AbstractBogusAnalysisSpec, BogusAnalysisSpec
@kwdef mutable struct BogusAnalysisSpec <: AbstractBogusAnalysisSpec
  name::Symbol = :BogusAnalysis
end

function DyadInterface.run_analysis(spec::BogusAnalysisSpec)
  base_spec = BogusAnalysisSpec(;
    name=:BogusAnalysis
  )
  run_analysis(base_spec)
end

BogusAnalysis(;kwargs...) = run_analysis(BogusAnalysisSpec(;kwargs...))
export BogusAnalysis, BogusAnalysisSpec
export BogusAnalysisSpec, BogusAnalysis",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "BogusAnalysis",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 34`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 35`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 36`] = `
{
  "code": "@doc Markdown.doc"""
   InterpolateFromFile(; name, filename)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`filename\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function InterpolateFromFile(; name, filename=nothing)
  fˍ₋value = dataFromFile(filename)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (filename::String = filename))
  append!(__params, @parameters (f::typeof(fˍ₋value))(..) = fˍ₋value)

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ f(u))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export InterpolateFromFile

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(InterpolateFromFile)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "InterpolateFromFile",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 37`] = `
{
  "code": "@connector function HydraulicPort(; name)
  vars = @variables begin
    p(t), []
    m_dot(t), [connect = Flow]
    h(t), [connect = Stream]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export HydraulicPort",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HydraulicPort",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 38`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 39`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 40`] = `
{
  "code": "@doc Markdown.doc"""
   Reservoir(; name, p0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`p0\`         |                          | Pa  |    |

## Connectors

 * \`port\` - ([\`HydraulicPort\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`rho\`         |                          | kg/m3  | 
"""
@component function Reservoir(; name, p0=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (p0::Float64 = p0))
  append!(__params, @parameters (rho0::Float64 = density(port__medium, p0)))
  append!(__params, @parameters (port__medium::MediumModel = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (rho(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = CommonTests.HydraulicPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # This equation is here just to reference common variables on the connector
  push!(__eqs, rho ~ density(port__medium, port.p))
  push!(__eqs, port.p ~ p0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Reservoir

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Reservoir)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Reservoir",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 41`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 42`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 43`] = `
{
  "code": "@doc Markdown.doc"""
   System1(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System1(; name, beta=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (beta::Float64 = beta))
    (medium::MediumModel = Beta(beta=beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System1

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System1)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System1",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 44`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 45`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 46`] = `
{
  "code": "@doc Markdown.doc"""
   System2(; name)

This model exists to ensure that we don't get an \`invalidContinuitySet\`
error (which was the case prior to #174)

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named sys = CommonTests.System1())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(sys.flange, flange))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 47`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 48`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 49`] = `
{
  "code": "@doc Markdown.doc"""
   System3(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System3(; name, beta=1, medium=Beta(beta=beta))

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (medium::MediumModel = medium))
  append!(__params, @parameters (beta::Float64 = beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System3

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System3)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "System3",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 50`] = `
{
  "code": "@kwdef mutable struct InterpolationData
    time::Real
    y::Integer
end

function Base.setproperty!(value::InterpolationData, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::InterpolationData)
  println(io, "[InterpolationData] \\n time=$(x.time) \\n y=$(x.y)")
end

Base.copy(x::InterpolationData) = InterpolationData(x.time, x.y)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::InterpolationData) = [
  model.time => pars.time,
  model.y => pars.y,
]

export InterpolationData
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "InterpolationData",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 51`] = `
{
  "code": "@kwdef mutable struct OptionalNumber__Just
    x::Real
end

function Base.setproperty!(value::OptionalNumber__Just, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Just)
  println(io, "[OptionalNumber__Just] \\n x=$(x.x)")
end

Base.copy(x::OptionalNumber__Just) = OptionalNumber__Just(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Just) = [
  model.x => pars.x,
]

export OptionalNumber__Just

@kwdef mutable struct OptionalNumber__Nothing
end

function Base.setproperty!(value::OptionalNumber__Nothing, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Nothing)
  println(io, "[OptionalNumber__Nothing] \\n ")
end

Base.copy(x::OptionalNumber__Nothing) = OptionalNumber__Nothing()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Nothing) = [
]

export OptionalNumber__Nothing
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "OptionalNumber",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CommonTest 52`] = `
{
  "generated/BogusAnalysis_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CommonTests: AbstractBogusAnalysisSpec, BogusAnalysisSpec
@kwdef mutable struct BogusAnalysisSpec <: AbstractBogusAnalysisSpec
  name::Symbol = :BogusAnalysis
end

function DyadInterface.run_analysis(spec::BogusAnalysisSpec)
  base_spec = BogusAnalysisSpec(;
    name=:BogusAnalysis
  )
  run_analysis(base_spec)
end

BogusAnalysis(;kwargs...) = run_analysis(BogusAnalysisSpec(;kwargs...))
export BogusAnalysis, BogusAnalysisSpec
export BogusAnalysisSpec, BogusAnalysis
",
  "generated/HasArrays_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   HasArrays(; name, N, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`N\`         |                          | --  |   5 |
| \`x\`         |                          | --  |    |
"""
@component function HasArrays(; name, N=5, x=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x[1:N]::Float64 = x))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  ### Control Structures
  for i in 1:N
      __defaults[x[i]] = (i)
      push!(__eqs, D(x[i]) ~ -x[i])
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HasArrays

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HasArrays)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/HasArrays_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HasArrays_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HydraulicPort_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@connector function HydraulicPort(; name)
  vars = @variables begin
    p(t), []
    m_dot(t), [connect = Flow]
    h(t), [connect = Stream]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export HydraulicPort
",
  "generated/InterpolateFromFile_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   InterpolateFromFile(; name, filename)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`filename\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function InterpolateFromFile(; name, filename=nothing)
  fˍ₋value = dataFromFile(filename)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (filename::String = filename))
  append!(__params, @parameters (f::typeof(fˍ₋value))(..) = fˍ₋value)

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ f(u))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export InterpolateFromFile

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(InterpolateFromFile)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/InterpolateFromFile_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/InterpolateFromFile_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/InterpolationData_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct InterpolationData
    time::Real
    y::Integer
end

function Base.setproperty!(value::InterpolationData, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::InterpolationData)
  println(io, "[InterpolationData] \\n time=$(x.time) \\n y=$(x.y)")
end

Base.copy(x::InterpolationData) = InterpolationData(x.time, x.y)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::InterpolationData) = [
  model.time => pars.time,
  model.y => pars.y,
]

export InterpolationData

",
  "generated/MetaArray_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   MetaArray(; name)
"""
@component function MetaArray(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  arrays = ODESystem[]
  for i in 1:10
    push!(arrays, CommonTests.HasArrays(N=8, name=Symbol("arrays", "_", i)))
  end
  append!(__systems, arrays)

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MetaArray

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MetaArray)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/MetaArray_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/MetaArray_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/OptionalNumber_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct OptionalNumber__Just
    x::Real
end

function Base.setproperty!(value::OptionalNumber__Just, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Just)
  println(io, "[OptionalNumber__Just] \\n x=$(x.x)")
end

Base.copy(x::OptionalNumber__Just) = OptionalNumber__Just(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Just) = [
  model.x => pars.x,
]

export OptionalNumber__Just

@kwdef mutable struct OptionalNumber__Nothing
end

function Base.setproperty!(value::OptionalNumber__Nothing, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::OptionalNumber__Nothing)
  println(io, "[OptionalNumber__Nothing] \\n ")
end

Base.copy(x::OptionalNumber__Nothing) = OptionalNumber__Nothing()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::OptionalNumber__Nothing) = [
]

export OptionalNumber__Nothing

",
  "generated/Reservoir_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Reservoir(; name, p0)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`p0\`         |                          | Pa  |    |

## Connectors

 * \`port\` - ([\`HydraulicPort\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`rho\`         |                          | kg/m3  | 
"""
@component function Reservoir(; name, p0=nothing, continuity__graph0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (p0::Float64 = p0))
  append!(__params, @parameters (rho0::Float64 = density(port__medium, p0)))
  append!(__params, @parameters (port__medium::MediumModel = continuity__graph0))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (rho(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named port = CommonTests.HydraulicPort())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  # This equation is here just to reference common variables on the connector
  push!(__eqs, rho ~ density(port__medium, port.p))
  push!(__eqs, port.p ~ p0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Reservoir

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Reservoir)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Reservoir_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Reservoir_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System1_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System1(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System1(; name, beta=1)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (beta::Float64 = beta))
    (medium::MediumModel = Beta(beta=beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System1

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System1)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System1_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System1_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System2_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System2(; name)

This model exists to ensure that we don't get an \`invalidContinuitySet\`
error (which was the case prior to #174)

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named sys = CommonTests.System1())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(sys.flange, flange))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System2_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System2_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System3_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   System3(; name, beta)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`beta\`         |                          | --  |   1 |

## Connectors

 * \`flange\` - This connector represents a mechanical flange with position and force as the potential and flow variables, respectively. ([\`Flange\`](@ref))
"""
@component function System3(; name, beta=1, medium=Beta(beta=beta))

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (medium::MediumModel = medium))
  append!(__params, @parameters (beta::Float64 = beta))

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange = __Dyad__Flange())
  push!(__systems, @named res = CommonTests.Reservoir(continuity__graph0=medium))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export System3

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(System3)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/System3_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/System3_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("HasArrays_definition.jl")
include("MetaArray_definition.jl")
include("BogusAnalysis_definition.jl")
include("InterpolateFromFile_definition.jl")
include("HydraulicPort_definition.jl")
include("Reservoir_definition.jl")
include("System1_definition.jl")
include("System2_definition.jl")
include("System3_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("HasArrays_experiment.jl")
include("MetaArray_experiment.jl")
include("InterpolateFromFile_experiment.jl")
include("Reservoir_experiment.jl")
include("System1_experiment.jl")
include("System2_experiment.jl")
include("System3_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("HasArrays_test.jl")
include("MetaArray_test.jl")
include("InterpolateFromFile_test.jl")
include("Reservoir_test.jl")
include("System1_test.jl")
include("System2_test.jl")
include("System3_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit

include("InterpolationData_type.jl")
include("OptionalNumber_type.jl")",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 1`] = `
{
  "code": "using DyadInterface

using JuliaSimControl
@kwdef mutable struct LotkaVolterraTunerSpec <: AbstractAutotuneSpec
  name::Symbol = :LotkaVolterraTuner
  # The measured output of P that is used for feedback
  var"measurement"::String = "foo"
  # The control input of the plant
  var"control_input"::String = "u"
  # The input to the system when optimizing the step response
  var"step_input"::String = "u"
  # The output to the system when optimizing the step response
  var"step_output"::String = "y"
  # The reference signal for the response optimization
  var"ref"::Float64 = 0
  # Sampling time
  var"Ts"::Float64 = 0.002
  # Duration (final time)
  var"duration"::Float64 = 10
  # Maximum allowed peak in the sensitivity function
  var"Ms"::Float64 = 1
  # Maximum allowed peak in the complementary sensitivity function
  var"Mt"::Float64 = 1
  # Maximum allowed peak in the noise sensitivity function
  var"Mks"::Float64 = 10
  # Discretization method
  var"disc"::String = "tustin"
  # If true, time-weighted error is used as the cost function.
  var"timeweight"::Bool = false
  # The order of the filter. Options are {1, 2}.
  var"filterorder"::Int64 = 2
  # If true, the filter damping ratio is optimized.
  var"optimize_d"::Bool = false
  # Lower bound for proportional gain
  var"kp_lb"::Float64 = 0
  # Lower bound for proportional gain
  var"kp_ub"::Float64 = 1e+300
  # Lower bound for integral gain
  var"ki_lb"::Float64 = 0
  # Lower bound for integral gain
  var"ki_ub"::Float64 = 1e+300
  # Lower bound for differential gain
  var"kd_lb"::Float64 = 0
  # Lower bound for differential gain
  var"kd_ub"::Float64 = 1e+300
  # Lower bound for filter time constant
  var"Tf_lb"::Float64 = 1e-16
  # Lower bound for filter time constant
  var"Tf_ub"::Float64 = 1e+300
  var"α"::Float64 = 1.3
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTunerSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α"))
  base_spec = AutotuneSpec(;
    name=:Autotune, measurement=spec.measurement, control_input=spec.control_input, step_input=spec.step_input, step_output=spec.step_output, ref=spec.ref, Ts=spec.Ts, duration=spec.duration, Ms=spec.Ms, Mt=spec.Mt, Mks=spec.Mks, disc=spec.disc, timeweight=spec.timeweight, filterorder=spec.filterorder, optimize_d=spec.optimize_d, kp_lb=spec.kp_lb, kp_ub=spec.kp_ub, ki_lb=spec.ki_lb, ki_ub=spec.ki_ub, kd_lb=spec.kd_lb, kd_ub=spec.kd_ub, Tf_lb=spec.Tf_lb, Tf_ub=spec.Tf_ub, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTuner(;kwargs...) = run_analysis(LotkaVolterraTunerSpec(;kwargs...))
export LotkaVolterraTuner, LotkaVolterraTunerSpec
export LotkaVolterraTunerSpec, LotkaVolterraTuner",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraTuner",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 2`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 3`] = `
{
  "code": "@testset "Running test case1 for LotkaVolterra" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = LotkaVolterra()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: ["x","y"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
  end
    if isfile("snapshots/LotkaVolterra_case1_sig0.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.x])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.x], width=2, label="Actual value of x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of x")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    end
    if isfile("snapshots/LotkaVolterra_case1_sig1.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.y) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.y])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
        plot(sol, idxs=[model.y], width=2, label="Actual value of y")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of y")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig1.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
    end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 4`] = `
{
  "code": "@doc Markdown.doc"""
   LotkaVolterra(; name, α, β, γ, δ)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`α\`         |                          | --  |   1.3 |
| \`β\`         |                          | --  |   0.9 |
| \`γ\`         |                          | --  |   0.8 |
| \`δ\`         |                          | --  |   1.8 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | --  | 
| \`y\`         |                          | --  | 
"""
@component function LotkaVolterra(; name, α=1.3, β=0.9, γ=0.8, δ=1.8)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (α::Float64 = α))
  append!(__params, @parameters (β::Float64 = β))
  append!(__params, @parameters (γ::Float64 = γ))
  append!(__params, @parameters (δ::Float64 = δ))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)))
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()
  __defaults[x] = (3.1)
  __defaults[y] = (1.5)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ α * x - β * x * y)
  push!(__eqs, D(y) ~ -δ * y + γ * x * y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export LotkaVolterra

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(LotkaVolterra)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 5`] = `
{
  "code": "using DyadInterface

using CustomAnalyses: AbstractGenericTransientSpec, GenericTransientSpec
@kwdef mutable struct LotkaVolterraTransientSpec <: AbstractGenericTransientSpec
  name::Symbol = :LotkaVolterraTransient
  var"integrator"::String = "auto"
  var"abstol"::Float64 = 0.001
  var"reltol"::Float64 = 0.001
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"dtmax"::Float64 = 0
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"γ"::Float64 = 0.8
  var"δ"::Float64 = 1.8
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β", var"γ"=spec.var"γ", var"δ"=spec.var"δ"))
  base_spec = GenericTransientSpec(;
    name=:GenericTransient, integrator=spec.integrator, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, dtmax=spec.dtmax, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTransient(;kwargs...) = run_analysis(LotkaVolterraTransientSpec(;kwargs...))
export LotkaVolterraTransient, LotkaVolterraTransientSpec
export LotkaVolterraTransientSpec, LotkaVolterraTransient",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraTransient",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 6`] = `
{
  "code": "using DyadInterface

using CustomAnalyses: AbstractSurrogateAnalysisSpec, SurrogateAnalysisSpec
@kwdef mutable struct LotkaVolterraSurrogateSpec <: AbstractSurrogateAnalysisSpec
  name::Symbol = :LotkaVolterraSurrogate
  # The type of surrogate model to be used. Can be either \`SolutionOperator\` or \`DigitalEcho\`
  var"surrogate_model"::String = "DigitalEcho"
  # Integration algorithm
  var"alg"::String = "auto"
  # Absolute tolerance
  var"abstol"::Float64 = 0.001
  # Relative tolerance
  var"reltol"::Float64 = 0.001
  # Start time
  var"start"::Float64 = 0
  # Stop time
  var"stop"::Float64 = 10
  # Save at time
  var"saveat"::Float64 = 10
  # Maximum time step
  var"dtmax"::Float64 = 0
  # The random seed to be used
  var"seed"::Int64 = 1032
  # Number of trajectories to generate from the model. These are total generated trajectories. Set \`train_ratio\` for splitting into training and validation.
  var"num_samples"::Int64 = 10
  # The numbers of runners to launch in parallel for data generation
  var"num_runners"::Int64 = 10
  # Reservoir size
  var"RSIZE"::Int64 = 30
  # Time constant
  var"tau"::Float64 = 0.1
  # Number of Epochs to train on
  var"n_epochs"::Int64 = 10
  # Number of Epochs per learning rate
  var"epochs_per_lr"::Int64 = 10
  # Regularization Constant for training
  var"regularization_constant"::Float64 = 0.000001
  # Ratio defining the train validation split
  var"train_ratio"::Float64 = 0.8
  # Field to train for. Can either be \`states\` or \`observables\`
  var"ground_truth_field"::String = "states"
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraSurrogateSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β"))
  base_spec = SurrogateAnalysisSpec(;
    name=:SurrogateAnalysis, surrogate_model=spec.surrogate_model, alg=spec.alg, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, saveat=spec.saveat, dtmax=spec.dtmax, seed=spec.seed, num_samples=spec.num_samples, num_runners=spec.num_runners, RSIZE=spec.RSIZE, tau=spec.tau, n_epochs=spec.n_epochs, epochs_per_lr=spec.epochs_per_lr, regularization_constant=spec.regularization_constant, train_ratio=spec.train_ratio, ground_truth_field=spec.ground_truth_field, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraSurrogate(;kwargs...) = run_analysis(LotkaVolterraSurrogateSpec(;kwargs...))
export LotkaVolterraSurrogate, LotkaVolterraSurrogateSpec
export LotkaVolterraSurrogateSpec, LotkaVolterraSurrogate",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraSurrogate",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 7`] = `
{
  "generated/LotkaVolterraSurrogate_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CustomAnalyses: AbstractSurrogateAnalysisSpec, SurrogateAnalysisSpec
@kwdef mutable struct LotkaVolterraSurrogateSpec <: AbstractSurrogateAnalysisSpec
  name::Symbol = :LotkaVolterraSurrogate
  # The type of surrogate model to be used. Can be either \`SolutionOperator\` or \`DigitalEcho\`
  var"surrogate_model"::String = "DigitalEcho"
  # Integration algorithm
  var"alg"::String = "auto"
  # Absolute tolerance
  var"abstol"::Float64 = 0.001
  # Relative tolerance
  var"reltol"::Float64 = 0.001
  # Start time
  var"start"::Float64 = 0
  # Stop time
  var"stop"::Float64 = 10
  # Save at time
  var"saveat"::Float64 = 10
  # Maximum time step
  var"dtmax"::Float64 = 0
  # The random seed to be used
  var"seed"::Int64 = 1032
  # Number of trajectories to generate from the model. These are total generated trajectories. Set \`train_ratio\` for splitting into training and validation.
  var"num_samples"::Int64 = 10
  # The numbers of runners to launch in parallel for data generation
  var"num_runners"::Int64 = 10
  # Reservoir size
  var"RSIZE"::Int64 = 30
  # Time constant
  var"tau"::Float64 = 0.1
  # Number of Epochs to train on
  var"n_epochs"::Int64 = 10
  # Number of Epochs per learning rate
  var"epochs_per_lr"::Int64 = 10
  # Regularization Constant for training
  var"regularization_constant"::Float64 = 0.000001
  # Ratio defining the train validation split
  var"train_ratio"::Float64 = 0.8
  # Field to train for. Can either be \`states\` or \`observables\`
  var"ground_truth_field"::String = "states"
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraSurrogateSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β"))
  base_spec = SurrogateAnalysisSpec(;
    name=:SurrogateAnalysis, surrogate_model=spec.surrogate_model, alg=spec.alg, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, saveat=spec.saveat, dtmax=spec.dtmax, seed=spec.seed, num_samples=spec.num_samples, num_runners=spec.num_runners, RSIZE=spec.RSIZE, tau=spec.tau, n_epochs=spec.n_epochs, epochs_per_lr=spec.epochs_per_lr, regularization_constant=spec.regularization_constant, train_ratio=spec.train_ratio, ground_truth_field=spec.ground_truth_field, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraSurrogate(;kwargs...) = run_analysis(LotkaVolterraSurrogateSpec(;kwargs...))
export LotkaVolterraSurrogate, LotkaVolterraSurrogateSpec
export LotkaVolterraSurrogateSpec, LotkaVolterraSurrogate
",
  "generated/LotkaVolterraTransient_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CustomAnalyses: AbstractGenericTransientSpec, GenericTransientSpec
@kwdef mutable struct LotkaVolterraTransientSpec <: AbstractGenericTransientSpec
  name::Symbol = :LotkaVolterraTransient
  var"integrator"::String = "auto"
  var"abstol"::Float64 = 0.001
  var"reltol"::Float64 = 0.001
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"dtmax"::Float64 = 0
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"γ"::Float64 = 0.8
  var"δ"::Float64 = 1.8
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β", var"γ"=spec.var"γ", var"δ"=spec.var"δ"))
  base_spec = GenericTransientSpec(;
    name=:GenericTransient, integrator=spec.integrator, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, dtmax=spec.dtmax, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTransient(;kwargs...) = run_analysis(LotkaVolterraTransientSpec(;kwargs...))
export LotkaVolterraTransient, LotkaVolterraTransientSpec
export LotkaVolterraTransientSpec, LotkaVolterraTransient
",
  "generated/LotkaVolterraTuner_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using JuliaSimControl
@kwdef mutable struct LotkaVolterraTunerSpec <: AbstractAutotuneSpec
  name::Symbol = :LotkaVolterraTuner
  # The measured output of P that is used for feedback
  var"measurement"::String = "foo"
  # The control input of the plant
  var"control_input"::String = "u"
  # The input to the system when optimizing the step response
  var"step_input"::String = "u"
  # The output to the system when optimizing the step response
  var"step_output"::String = "y"
  # The reference signal for the response optimization
  var"ref"::Float64 = 0
  # Sampling time
  var"Ts"::Float64 = 0.002
  # Duration (final time)
  var"duration"::Float64 = 10
  # Maximum allowed peak in the sensitivity function
  var"Ms"::Float64 = 1
  # Maximum allowed peak in the complementary sensitivity function
  var"Mt"::Float64 = 1
  # Maximum allowed peak in the noise sensitivity function
  var"Mks"::Float64 = 10
  # Discretization method
  var"disc"::String = "tustin"
  # If true, time-weighted error is used as the cost function.
  var"timeweight"::Bool = false
  # The order of the filter. Options are {1, 2}.
  var"filterorder"::Int64 = 2
  # If true, the filter damping ratio is optimized.
  var"optimize_d"::Bool = false
  # Lower bound for proportional gain
  var"kp_lb"::Float64 = 0
  # Lower bound for proportional gain
  var"kp_ub"::Float64 = 1e+300
  # Lower bound for integral gain
  var"ki_lb"::Float64 = 0
  # Lower bound for integral gain
  var"ki_ub"::Float64 = 1e+300
  # Lower bound for differential gain
  var"kd_lb"::Float64 = 0
  # Lower bound for differential gain
  var"kd_ub"::Float64 = 1e+300
  # Lower bound for filter time constant
  var"Tf_lb"::Float64 = 1e-16
  # Lower bound for filter time constant
  var"Tf_ub"::Float64 = 1e+300
  var"α"::Float64 = 1.3
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTunerSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α"))
  base_spec = AutotuneSpec(;
    name=:Autotune, measurement=spec.measurement, control_input=spec.control_input, step_input=spec.step_input, step_output=spec.step_output, ref=spec.ref, Ts=spec.Ts, duration=spec.duration, Ms=spec.Ms, Mt=spec.Mt, Mks=spec.Mks, disc=spec.disc, timeweight=spec.timeweight, filterorder=spec.filterorder, optimize_d=spec.optimize_d, kp_lb=spec.kp_lb, kp_ub=spec.kp_ub, ki_lb=spec.ki_lb, ki_ub=spec.ki_ub, kd_lb=spec.kd_lb, kd_ub=spec.kd_ub, Tf_lb=spec.Tf_lb, Tf_ub=spec.Tf_ub, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTuner(;kwargs...) = run_analysis(LotkaVolterraTunerSpec(;kwargs...))
export LotkaVolterraTuner, LotkaVolterraTunerSpec
export LotkaVolterraTunerSpec, LotkaVolterraTuner
",
  "generated/LotkaVolterra_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   LotkaVolterra(; name, α, β, γ, δ)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`α\`         |                          | --  |   1.3 |
| \`β\`         |                          | --  |   0.9 |
| \`γ\`         |                          | --  |   0.8 |
| \`δ\`         |                          | --  |   1.8 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | --  | 
| \`y\`         |                          | --  | 
"""
@component function LotkaVolterra(; name, α=1.3, β=0.9, γ=0.8, δ=1.8)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (α::Float64 = α))
  append!(__params, @parameters (β::Float64 = β))
  append!(__params, @parameters (γ::Float64 = γ))
  append!(__params, @parameters (δ::Float64 = δ))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)))
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()
  __defaults[x] = (3.1)
  __defaults[y] = (1.5)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ α * x - β * x * y)
  push!(__eqs, D(y) ~ -δ * y + γ * x * y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export LotkaVolterra

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(LotkaVolterra)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/LotkaVolterra_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/LotkaVolterra_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@testset "Running test case1 for LotkaVolterra" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = LotkaVolterra()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: ["x","y"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
  end
    if isfile("snapshots/LotkaVolterra_case1_sig0.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.x])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.x], width=2, label="Actual value of x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of x")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    end
    if isfile("snapshots/LotkaVolterra_case1_sig1.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.y) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.y])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
        plot(sol, idxs=[model.y], width=2, label="Actual value of y")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of y")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig1.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
    end
end
",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("LotkaVolterraTuner_definition.jl")
include("LotkaVolterra_definition.jl")
include("LotkaVolterraTransient_definition.jl")
include("LotkaVolterraSurrogate_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("LotkaVolterra_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("LotkaVolterra_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 8`] = `
{
  "code": "using DyadInterface

using JuliaSimControl
@kwdef mutable struct LotkaVolterraTunerSpec <: AbstractAutotuneSpec
  name::Symbol = :LotkaVolterraTuner
  # The measured output of P that is used for feedback
  var"measurement"::String = "foo"
  # The control input of the plant
  var"control_input"::String = "u"
  # The input to the system when optimizing the step response
  var"step_input"::String = "u"
  # The output to the system when optimizing the step response
  var"step_output"::String = "y"
  # The reference signal for the response optimization
  var"ref"::Float64 = 0
  # Sampling time
  var"Ts"::Float64 = 0.002
  # Duration (final time)
  var"duration"::Float64 = 10
  # Maximum allowed peak in the sensitivity function
  var"Ms"::Float64 = 1
  # Maximum allowed peak in the complementary sensitivity function
  var"Mt"::Float64 = 1
  # Maximum allowed peak in the noise sensitivity function
  var"Mks"::Float64 = 10
  # Discretization method
  var"disc"::String = "tustin"
  # If true, time-weighted error is used as the cost function.
  var"timeweight"::Bool = false
  # The order of the filter. Options are {1, 2}.
  var"filterorder"::Int64 = 2
  # If true, the filter damping ratio is optimized.
  var"optimize_d"::Bool = false
  # Lower bound for proportional gain
  var"kp_lb"::Float64 = 0
  # Lower bound for proportional gain
  var"kp_ub"::Float64 = 1e+300
  # Lower bound for integral gain
  var"ki_lb"::Float64 = 0
  # Lower bound for integral gain
  var"ki_ub"::Float64 = 1e+300
  # Lower bound for differential gain
  var"kd_lb"::Float64 = 0
  # Lower bound for differential gain
  var"kd_ub"::Float64 = 1e+300
  # Lower bound for filter time constant
  var"Tf_lb"::Float64 = 1e-16
  # Lower bound for filter time constant
  var"Tf_ub"::Float64 = 1e+300
  var"α"::Float64 = 1.3
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTunerSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α"))
  base_spec = AutotuneSpec(;
    name=:Autotune, measurement=spec.measurement, control_input=spec.control_input, step_input=spec.step_input, step_output=spec.step_output, ref=spec.ref, Ts=spec.Ts, duration=spec.duration, Ms=spec.Ms, Mt=spec.Mt, Mks=spec.Mks, disc=spec.disc, timeweight=spec.timeweight, filterorder=spec.filterorder, optimize_d=spec.optimize_d, kp_lb=spec.kp_lb, kp_ub=spec.kp_ub, ki_lb=spec.ki_lb, ki_ub=spec.ki_ub, kd_lb=spec.kd_lb, kd_ub=spec.kd_ub, Tf_lb=spec.Tf_lb, Tf_ub=spec.Tf_ub, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTuner(;kwargs...) = run_analysis(LotkaVolterraTunerSpec(;kwargs...))
export LotkaVolterraTuner, LotkaVolterraTunerSpec
export LotkaVolterraTunerSpec, LotkaVolterraTuner",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraTuner",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 9`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 10`] = `
{
  "code": "@testset "Running test case1 for LotkaVolterra" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = LotkaVolterra()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: ["x","y"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
  end
    if isfile("snapshots/LotkaVolterra_case1_sig0.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.x])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.x], width=2, label="Actual value of x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of x")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    end
    if isfile("snapshots/LotkaVolterra_case1_sig1.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.y) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.y])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
        plot(sol, idxs=[model.y], width=2, label="Actual value of y")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of y")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig1.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
    end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 11`] = `
{
  "code": "@doc Markdown.doc"""
   LotkaVolterra(; name, α, β, γ, δ)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`α\`         |                          | --  |   1.3 |
| \`β\`         |                          | --  |   0.9 |
| \`γ\`         |                          | --  |   0.8 |
| \`δ\`         |                          | --  |   1.8 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | --  | 
| \`y\`         |                          | --  | 
"""
@component function LotkaVolterra(; name, α=1.3, β=0.9, γ=0.8, δ=1.8)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (α::Float64 = α))
  append!(__params, @parameters (β::Float64 = β))
  append!(__params, @parameters (γ::Float64 = γ))
  append!(__params, @parameters (δ::Float64 = δ))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)))
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()
  __defaults[x] = (3.1)
  __defaults[y] = (1.5)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ α * x - β * x * y)
  push!(__eqs, D(y) ~ -δ * y + γ * x * y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export LotkaVolterra

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(LotkaVolterra)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterra",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 12`] = `
{
  "code": "using DyadInterface

using CustomAnalyses: AbstractGenericTransientSpec, GenericTransientSpec
@kwdef mutable struct LotkaVolterraTransientSpec <: AbstractGenericTransientSpec
  name::Symbol = :LotkaVolterraTransient
  var"integrator"::String = "auto"
  var"abstol"::Float64 = 0.001
  var"reltol"::Float64 = 0.001
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"dtmax"::Float64 = 0
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"γ"::Float64 = 0.8
  var"δ"::Float64 = 1.8
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β", var"γ"=spec.var"γ", var"δ"=spec.var"δ"))
  base_spec = GenericTransientSpec(;
    name=:GenericTransient, integrator=spec.integrator, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, dtmax=spec.dtmax, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTransient(;kwargs...) = run_analysis(LotkaVolterraTransientSpec(;kwargs...))
export LotkaVolterraTransient, LotkaVolterraTransientSpec
export LotkaVolterraTransientSpec, LotkaVolterraTransient",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraTransient",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 13`] = `
{
  "code": "using DyadInterface

using CustomAnalyses: AbstractSurrogateAnalysisSpec, SurrogateAnalysisSpec
@kwdef mutable struct LotkaVolterraSurrogateSpec <: AbstractSurrogateAnalysisSpec
  name::Symbol = :LotkaVolterraSurrogate
  # The type of surrogate model to be used. Can be either \`SolutionOperator\` or \`DigitalEcho\`
  var"surrogate_model"::String = "DigitalEcho"
  # Integration algorithm
  var"alg"::String = "auto"
  # Absolute tolerance
  var"abstol"::Float64 = 0.001
  # Relative tolerance
  var"reltol"::Float64 = 0.001
  # Start time
  var"start"::Float64 = 0
  # Stop time
  var"stop"::Float64 = 10
  # Save at time
  var"saveat"::Float64 = 10
  # Maximum time step
  var"dtmax"::Float64 = 0
  # The random seed to be used
  var"seed"::Int64 = 1032
  # Number of trajectories to generate from the model. These are total generated trajectories. Set \`train_ratio\` for splitting into training and validation.
  var"num_samples"::Int64 = 10
  # The numbers of runners to launch in parallel for data generation
  var"num_runners"::Int64 = 10
  # Reservoir size
  var"RSIZE"::Int64 = 30
  # Time constant
  var"tau"::Float64 = 0.1
  # Number of Epochs to train on
  var"n_epochs"::Int64 = 10
  # Number of Epochs per learning rate
  var"epochs_per_lr"::Int64 = 10
  # Regularization Constant for training
  var"regularization_constant"::Float64 = 0.000001
  # Ratio defining the train validation split
  var"train_ratio"::Float64 = 0.8
  # Field to train for. Can either be \`states\` or \`observables\`
  var"ground_truth_field"::String = "states"
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraSurrogateSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β"))
  base_spec = SurrogateAnalysisSpec(;
    name=:SurrogateAnalysis, surrogate_model=spec.surrogate_model, alg=spec.alg, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, saveat=spec.saveat, dtmax=spec.dtmax, seed=spec.seed, num_samples=spec.num_samples, num_runners=spec.num_runners, RSIZE=spec.RSIZE, tau=spec.tau, n_epochs=spec.n_epochs, epochs_per_lr=spec.epochs_per_lr, regularization_constant=spec.regularization_constant, train_ratio=spec.train_ratio, ground_truth_field=spec.ground_truth_field, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraSurrogate(;kwargs...) = run_analysis(LotkaVolterraSurrogateSpec(;kwargs...))
export LotkaVolterraSurrogate, LotkaVolterraSurrogateSpec
export LotkaVolterraSurrogateSpec, LotkaVolterraSurrogate",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "LotkaVolterraSurrogate",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for CustomAnalyses 14`] = `
{
  "generated/LotkaVolterraSurrogate_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CustomAnalyses: AbstractSurrogateAnalysisSpec, SurrogateAnalysisSpec
@kwdef mutable struct LotkaVolterraSurrogateSpec <: AbstractSurrogateAnalysisSpec
  name::Symbol = :LotkaVolterraSurrogate
  # The type of surrogate model to be used. Can be either \`SolutionOperator\` or \`DigitalEcho\`
  var"surrogate_model"::String = "DigitalEcho"
  # Integration algorithm
  var"alg"::String = "auto"
  # Absolute tolerance
  var"abstol"::Float64 = 0.001
  # Relative tolerance
  var"reltol"::Float64 = 0.001
  # Start time
  var"start"::Float64 = 0
  # Stop time
  var"stop"::Float64 = 10
  # Save at time
  var"saveat"::Float64 = 10
  # Maximum time step
  var"dtmax"::Float64 = 0
  # The random seed to be used
  var"seed"::Int64 = 1032
  # Number of trajectories to generate from the model. These are total generated trajectories. Set \`train_ratio\` for splitting into training and validation.
  var"num_samples"::Int64 = 10
  # The numbers of runners to launch in parallel for data generation
  var"num_runners"::Int64 = 10
  # Reservoir size
  var"RSIZE"::Int64 = 30
  # Time constant
  var"tau"::Float64 = 0.1
  # Number of Epochs to train on
  var"n_epochs"::Int64 = 10
  # Number of Epochs per learning rate
  var"epochs_per_lr"::Int64 = 10
  # Regularization Constant for training
  var"regularization_constant"::Float64 = 0.000001
  # Ratio defining the train validation split
  var"train_ratio"::Float64 = 0.8
  # Field to train for. Can either be \`states\` or \`observables\`
  var"ground_truth_field"::String = "states"
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraSurrogateSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β"))
  base_spec = SurrogateAnalysisSpec(;
    name=:SurrogateAnalysis, surrogate_model=spec.surrogate_model, alg=spec.alg, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, saveat=spec.saveat, dtmax=spec.dtmax, seed=spec.seed, num_samples=spec.num_samples, num_runners=spec.num_runners, RSIZE=spec.RSIZE, tau=spec.tau, n_epochs=spec.n_epochs, epochs_per_lr=spec.epochs_per_lr, regularization_constant=spec.regularization_constant, train_ratio=spec.train_ratio, ground_truth_field=spec.ground_truth_field, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraSurrogate(;kwargs...) = run_analysis(LotkaVolterraSurrogateSpec(;kwargs...))
export LotkaVolterraSurrogate, LotkaVolterraSurrogateSpec
export LotkaVolterraSurrogateSpec, LotkaVolterraSurrogate
",
  "generated/LotkaVolterraTransient_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using CustomAnalyses: AbstractGenericTransientSpec, GenericTransientSpec
@kwdef mutable struct LotkaVolterraTransientSpec <: AbstractGenericTransientSpec
  name::Symbol = :LotkaVolterraTransient
  var"integrator"::String = "auto"
  var"abstol"::Float64 = 0.001
  var"reltol"::Float64 = 0.001
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"dtmax"::Float64 = 0
  var"α"::Float64 = 1.3
  var"β"::Float64 = 0.9
  var"γ"::Float64 = 0.8
  var"δ"::Float64 = 1.8
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α", var"β"=spec.var"β", var"γ"=spec.var"γ", var"δ"=spec.var"δ"))
  base_spec = GenericTransientSpec(;
    name=:GenericTransient, integrator=spec.integrator, abstol=spec.abstol, reltol=spec.reltol, start=spec.start, stop=spec.stop, dtmax=spec.dtmax, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTransient(;kwargs...) = run_analysis(LotkaVolterraTransientSpec(;kwargs...))
export LotkaVolterraTransient, LotkaVolterraTransientSpec
export LotkaVolterraTransientSpec, LotkaVolterraTransient
",
  "generated/LotkaVolterraTuner_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

using JuliaSimControl
@kwdef mutable struct LotkaVolterraTunerSpec <: AbstractAutotuneSpec
  name::Symbol = :LotkaVolterraTuner
  # The measured output of P that is used for feedback
  var"measurement"::String = "foo"
  # The control input of the plant
  var"control_input"::String = "u"
  # The input to the system when optimizing the step response
  var"step_input"::String = "u"
  # The output to the system when optimizing the step response
  var"step_output"::String = "y"
  # The reference signal for the response optimization
  var"ref"::Float64 = 0
  # Sampling time
  var"Ts"::Float64 = 0.002
  # Duration (final time)
  var"duration"::Float64 = 10
  # Maximum allowed peak in the sensitivity function
  var"Ms"::Float64 = 1
  # Maximum allowed peak in the complementary sensitivity function
  var"Mt"::Float64 = 1
  # Maximum allowed peak in the noise sensitivity function
  var"Mks"::Float64 = 10
  # Discretization method
  var"disc"::String = "tustin"
  # If true, time-weighted error is used as the cost function.
  var"timeweight"::Bool = false
  # The order of the filter. Options are {1, 2}.
  var"filterorder"::Int64 = 2
  # If true, the filter damping ratio is optimized.
  var"optimize_d"::Bool = false
  # Lower bound for proportional gain
  var"kp_lb"::Float64 = 0
  # Lower bound for proportional gain
  var"kp_ub"::Float64 = 1e+300
  # Lower bound for integral gain
  var"ki_lb"::Float64 = 0
  # Lower bound for integral gain
  var"ki_ub"::Float64 = 1e+300
  # Lower bound for differential gain
  var"kd_lb"::Float64 = 0
  # Lower bound for differential gain
  var"kd_ub"::Float64 = 1e+300
  # Lower bound for filter time constant
  var"Tf_lb"::Float64 = 1e-16
  # Lower bound for filter time constant
  var"Tf_ub"::Float64 = 1e+300
  var"α"::Float64 = 1.3
  var"model"::Union{Nothing, ODESystem} = CustomAnalyses.LotkaVolterra(; name=:LotkaVolterra)
end

function DyadInterface.run_analysis(spec::LotkaVolterraTunerSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"α"=spec.var"α"))
  base_spec = AutotuneSpec(;
    name=:Autotune, measurement=spec.measurement, control_input=spec.control_input, step_input=spec.step_input, step_output=spec.step_output, ref=spec.ref, Ts=spec.Ts, duration=spec.duration, Ms=spec.Ms, Mt=spec.Mt, Mks=spec.Mks, disc=spec.disc, timeweight=spec.timeweight, filterorder=spec.filterorder, optimize_d=spec.optimize_d, kp_lb=spec.kp_lb, kp_ub=spec.kp_ub, ki_lb=spec.ki_lb, ki_ub=spec.ki_ub, kd_lb=spec.kd_lb, kd_ub=spec.kd_ub, Tf_lb=spec.Tf_lb, Tf_ub=spec.Tf_ub, model=spec.model
  )
  run_analysis(base_spec)
end

LotkaVolterraTuner(;kwargs...) = run_analysis(LotkaVolterraTunerSpec(;kwargs...))
export LotkaVolterraTuner, LotkaVolterraTunerSpec
export LotkaVolterraTunerSpec, LotkaVolterraTuner
",
  "generated/LotkaVolterra_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   LotkaVolterra(; name, α, β, γ, δ)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`α\`         |                          | --  |   1.3 |
| \`β\`         |                          | --  |   0.9 |
| \`γ\`         |                          | --  |   0.8 |
| \`δ\`         |                          | --  |   1.8 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | --  | 
| \`y\`         |                          | --  | 
"""
@component function LotkaVolterra(; name, α=1.3, β=0.9, γ=0.8, δ=1.8)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (α::Float64 = α))
  append!(__params, @parameters (β::Float64 = β))
  append!(__params, @parameters (γ::Float64 = γ))
  append!(__params, @parameters (δ::Float64 = δ))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)))
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()
  __defaults[x] = (3.1)
  __defaults[y] = (1.5)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ α * x - β * x * y)
  push!(__eqs, D(y) ~ -δ * y + γ * x * y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export LotkaVolterra

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(LotkaVolterra)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/LotkaVolterra_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/LotkaVolterra_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@testset "Running test case1 for LotkaVolterra" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = LotkaVolterra()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: ["x","y"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
  end
    if isfile("snapshots/LotkaVolterra_case1_sig0.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.x])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.x], width=2, label="Actual value of x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of x")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.x) for t in ref_times]))
    end
    if isfile("snapshots/LotkaVolterra_case1_sig1.ref")
      ref = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.y) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.y])
        dfr = CSV.read("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame)
        plot(sol, idxs=[model.y], width=2, label="Actual value of y")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of y")
        mkpath("comparisons")
        savefig("comparisons/LotkaVolterra_case1_sig1.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/LotkaVolterra_case1_sig1.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.y) for t in ref_times]))
    end
end
",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("LotkaVolterraTuner_definition.jl")
include("LotkaVolterra_definition.jl")
include("LotkaVolterraTransient_definition.jl")
include("LotkaVolterraSurrogate_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("LotkaVolterra_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("LotkaVolterra_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 1`] = `
{
  "code": "@connector function Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [guess = 0.1, connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export Pin",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Pin",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 2`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Ground",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 3`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Ground",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 4`] = `
{
  "code": "@doc Markdown.doc"""
   Ground(; name)

## Connectors

 * \`g\` - ([\`Pin\`](@ref))
"""
@component function Ground(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named g = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, g.v ~ 0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Ground

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Ground)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Ground",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 5`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "CurrentSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 6`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "CurrentSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 7`] = `
{
  "code": "@doc Markdown.doc"""
   CurrentSource(; name, i_final)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`i_final\`         |                          | A  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function CurrentSource(; name, i_final=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (i_final::Float64 = i_final))
  append!(__params, @parameters (i_f::Float64 = i_final))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, i ~ i_final)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export CurrentSource

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(CurrentSource)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "CurrentSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 8`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "VoltageStep",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 9`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "VoltageStep",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 10`] = `
{
  "code": "@doc Markdown.doc"""
   VoltageStep(; name, Vf)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`Vf\`         |                          | V  |   10 |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltageStep(; name, Vf=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Vf::Float64 = Vf))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ ifelse(t < 0, 0, ifelse(t > 5, 7, Vf)))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltageStep

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltageStep)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "VoltageStep",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 11`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 12`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 13`] = `
{
  "code": "@doc Markdown.doc"""
   VoltageSource(; name)

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))
 * \`V\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltageSource(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables V(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ V)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltageSource

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltageSource)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 14`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 15`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 16`] = `
{
  "code": "@doc Markdown.doc"""
   VoltagePulse(; name, Vbase, Vpulse, start, stop)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`Vbase\`         |                          | V  |    |
| \`Vpulse\`         |                          | V  |    |
| \`start\`         |                          | s  |    |
| \`stop\`         |                          | s  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltagePulse(; name, Vbase=nothing, Vpulse=nothing, start=nothing, stop=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Vbase::Float64 = Vbase))
  append!(__params, @parameters (Vpulse::Float64 = Vpulse))
  append!(__params, @parameters (start::Float64 = start))
  append!(__params, @parameters (stop::Float64 = stop))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ ifelse((t > start) & (t < stop), Vpulse, Vbase))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltagePulse

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltagePulse)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 17`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Capacitor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 18`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Capacitor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 19`] = `
{
  "code": "@doc Markdown.doc"""
   Capacitor(; name, C)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`C\`         |                          | F  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Capacitor(; name, C=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (C::Float64 = C))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()
  __defaults[v] = (10)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, C * D(v) ~ i)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Capacitor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Capacitor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Capacitor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 20`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Inductor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 21`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Inductor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 22`] = `
{
  "code": "@doc Markdown.doc"""
   Inductor(; name, L)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`L\`         |                          | H  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Inductor(; name, L=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (L::Float64 = L))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, L * D(i) ~ v)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Inductor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Inductor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Inductor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 23`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Resistor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 24`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Resistor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 25`] = `
{
  "code": "@doc Markdown.doc"""
   Resistor(; name, R)

A simple linear resistor model

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`R\`         | Resistance of this Resistor                         | Ω  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Resistor(; name, R=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (R::Float64 = R), [description = "Resistance of this Resistor"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  # Ohm's Law
  push!(__eqs, v ~ i * R)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Resistor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Resistor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Resistor",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 26`] = `
{
  "code": "using DyadInterface

@kwdef mutable struct RLCTransientSpec <: AbstractTransientAnalysisSpec
  name::Symbol = :RLCTransient
  var"alg"::String = "auto"
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"abstol"::Float64 = 0.01
  var"reltol"::Float64 = 0.001
  var"saveat"::Float64 = 0
  var"dtmax"::Float64 = 0.1
  var"IfLifting"::Bool = false
  var"C"::Float64 = 0.001
  # This is an RLC model.  This should support markdown.  That includes
  # HTML as well.
  var"model"::Union{Nothing, ODESystem} = RLC.RLCModel(; name=:RLCModel)
end

function DyadInterface.run_analysis(spec::RLCTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"C"=spec.var"C"))
  base_spec = TransientAnalysisSpec(;
    name=:TransientAnalysis, alg=spec.alg, start=spec.start, stop=spec.stop, abstol=spec.abstol, reltol=spec.reltol, saveat=spec.saveat, dtmax=spec.dtmax, IfLifting=spec.IfLifting, model=spec.model
  )
  run_analysis(base_spec)
end

RLCTransient(;kwargs...) = run_analysis(RLCTransientSpec(;kwargs...))
export RLCTransient, RLCTransientSpec
export RLCTransientSpec, RLCTransient",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "RLCTransient",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 27`] = `
{
  "code": "@kwdef mutable struct RLCModelParams
    R::Real = 15
    C::Real = 0.001
    L::Real = 1
end

function Base.setproperty!(value::RLCModelParams, name::Symbol, x)
  if name == :R
    @assert x > 10 "R must be greater than 10"
  end
  if name == :R
    @assert x < 20 "R must be less than 20"
  end
  if name == :C
    @assert x > 0 "C must be greater than 0"
  end
  if name == :L
    @assert x > 0 "L must be greater than 0"
  end
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::RLCModelParams)
  println(io, "[RLCModelParams] \\n R=$(x.R) \\n C=$(x.C) \\n L=$(x.L)")
end

Base.copy(x::RLCModelParams) = RLCModelParams(x.R, x.C, x.L)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::RLCModelParams) = [
  model.R => pars.R,
  model.C => pars.C,
  model.L => pars.L,
]

export RLCModelParams
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "RLCModelParams",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 28`] = `
{
  "code": """"Run model RLCModel from 0 to 10"""
function simple()
  @mtkbuild model = RLCModel()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export simple",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "RLCModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 29`] = `
{
  "code": "@test try
    simple()
    true
catch
    false
end
@testset "Running test case1 for RLCModel" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = RLCModel()
  u0 = [model.t => 0, model.capacitor.v => 10]
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "RLCModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 30`] = `
{
  "code": "@doc Markdown.doc"""
   RLCModel(; name)

This is an RLC model.  This should support markdown.  That includes
HTML as well.
"""
@component function RLCModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.VoltageStep(Vf=24))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export RLCModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(RLCModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "RLCModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 31`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "RLCModel2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 32`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "RLCModel2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 33`] = `
{
  "code": "@doc Markdown.doc"""
   RLCModel2(; name)
"""
@component function RLCModel2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.CurrentSource(i_final=0.0015))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export RLCModel2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(RLCModel2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "RLCModel2",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 34`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "StepCurrent",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 35`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "StepCurrent",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 36`] = `
{
  "code": "# Component StepCurrent is an external component definition.  This means that the
# code for this component should be written in native Julia and will not be generated by
# the Dyad compiler.  Dyad will only generate a stub that creates the function name.
# The implementation of the function (function StepCurrent(; name, params...))
# must be manually written.
function StepCurrent end
export StepCurrent

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(StepCurrent)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "StepCurrent",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for RLC library 37`] = `
{
  "generated/Capacitor_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Capacitor(; name, C)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`C\`         |                          | F  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Capacitor(; name, C=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (C::Float64 = C))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()
  __defaults[v] = (10)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, C * D(v) ~ i)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Capacitor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Capacitor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/Capacitor_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Capacitor_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/CurrentSource_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   CurrentSource(; name, i_final)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`i_final\`         |                          | A  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function CurrentSource(; name, i_final=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (i_final::Float64 = i_final))
  append!(__params, @parameters (i_f::Float64 = i_final))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, i ~ i_final)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export CurrentSource

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(CurrentSource)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/CurrentSource_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/CurrentSource_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Ground_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Ground(; name)

## Connectors

 * \`g\` - ([\`Pin\`](@ref))
"""
@component function Ground(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named g = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, g.v ~ 0)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Ground

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Ground)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/Ground_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Ground_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Inductor_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Inductor(; name, L)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`L\`         |                          | H  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Inductor(; name, L=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (L::Float64 = L))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, L * D(i) ~ v)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Inductor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Inductor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/Inductor_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Inductor_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Pin_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@connector function Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [guess = 0.1, connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
export Pin
",
  "generated/RLCModel2_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   RLCModel2(; name)
"""
@component function RLCModel2(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.CurrentSource(i_final=0.0015))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export RLCModel2

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(RLCModel2)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")
",
  "generated/RLCModel2_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/RLCModel2_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/RLCModelParams_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct RLCModelParams
    R::Real = 15
    C::Real = 0.001
    L::Real = 1
end

function Base.setproperty!(value::RLCModelParams, name::Symbol, x)
  if name == :R
    @assert x > 10 "R must be greater than 10"
  end
  if name == :R
    @assert x < 20 "R must be less than 20"
  end
  if name == :C
    @assert x > 0 "C must be greater than 0"
  end
  if name == :L
    @assert x > 0 "L must be greater than 0"
  end
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::RLCModelParams)
  println(io, "[RLCModelParams] \\n R=$(x.R) \\n C=$(x.C) \\n L=$(x.L)")
end

Base.copy(x::RLCModelParams) = RLCModelParams(x.R, x.C, x.L)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::RLCModelParams) = [
  model.R => pars.R,
  model.C => pars.C,
  model.L => pars.L,
]

export RLCModelParams

",
  "generated/RLCModel_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   RLCModel(; name)

This is an RLC model.  This should support markdown.  That includes
HTML as well.
"""
@component function RLCModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.VoltageStep(Vf=24))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export RLCModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(RLCModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")
",
  "generated/RLCModel_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""Run model RLCModel from 0 to 10"""
function simple()
  @mtkbuild model = RLCModel()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export simple
",
  "generated/RLCModel_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@test try
    simple()
    true
catch
    false
end
@testset "Running test case1 for RLCModel" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = RLCModel()
  u0 = [model.t => 0, model.capacitor.v => 10]
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end
",
  "generated/RLCTransient_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


using DyadInterface

@kwdef mutable struct RLCTransientSpec <: AbstractTransientAnalysisSpec
  name::Symbol = :RLCTransient
  var"alg"::String = "auto"
  var"start"::Float64 = 0
  var"stop"::Float64 = 10
  var"abstol"::Float64 = 0.01
  var"reltol"::Float64 = 0.001
  var"saveat"::Float64 = 0
  var"dtmax"::Float64 = 0.1
  var"IfLifting"::Bool = false
  var"C"::Float64 = 0.001
  # This is an RLC model.  This should support markdown.  That includes
  # HTML as well.
  var"model"::Union{Nothing, ODESystem} = RLC.RLCModel(; name=:RLCModel)
end

function DyadInterface.run_analysis(spec::RLCTransientSpec)
  spec.model = DyadInterface.update_model(spec.model, (; var"C"=spec.var"C"))
  base_spec = TransientAnalysisSpec(;
    name=:TransientAnalysis, alg=spec.alg, start=spec.start, stop=spec.stop, abstol=spec.abstol, reltol=spec.reltol, saveat=spec.saveat, dtmax=spec.dtmax, IfLifting=spec.IfLifting, model=spec.model
  )
  run_analysis(base_spec)
end

RLCTransient(;kwargs...) = run_analysis(RLCTransientSpec(;kwargs...))
export RLCTransient, RLCTransientSpec
export RLCTransientSpec, RLCTransient
",
  "generated/Resistor_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Resistor(; name, R)

A simple linear resistor model

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`R\`         | Resistance of this Resistor                         | Ω  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function Resistor(; name, R=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (R::Float64 = R), [description = "Resistance of this Resistor"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  # Ohm's Law
  push!(__eqs, v ~ i * R)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Resistor

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Resistor)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/Resistor_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Resistor_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/StepCurrent_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


# Component StepCurrent is an external component definition.  This means that the
# code for this component should be written in native Julia and will not be generated by
# the Dyad compiler.  Dyad will only generate a stub that creates the function name.
# The implementation of the function (function StepCurrent(; name, params...))
# must be manually written.
function StepCurrent end
export StepCurrent

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(StepCurrent)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/StepCurrent_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/StepCurrent_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltagePulse_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   VoltagePulse(; name, Vbase, Vpulse, start, stop)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`Vbase\`         |                          | V  |    |
| \`Vpulse\`         |                          | V  |    |
| \`start\`         |                          | s  |    |
| \`stop\`         |                          | s  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltagePulse(; name, Vbase=nothing, Vpulse=nothing, start=nothing, stop=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Vbase::Float64 = Vbase))
  append!(__params, @parameters (Vpulse::Float64 = Vpulse))
  append!(__params, @parameters (start::Float64 = start))
  append!(__params, @parameters (stop::Float64 = stop))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ ifelse((t > start) & (t < stop), Vpulse, Vbase))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltagePulse

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltagePulse)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/VoltagePulse_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltagePulse_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltageSource_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   VoltageSource(; name)

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))
 * \`V\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltageSource(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables V(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ V)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltageSource

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltageSource)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/VoltageSource_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltageSource_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltageStep_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   VoltageStep(; name, Vf)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`Vf\`         |                          | V  |   10 |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltageStep(; name, Vf=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Vf::Float64 = Vf))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ ifelse(t < 0, 0, ifelse(t > 5, 7, Vf)))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltageStep

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltageStep)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")
",
  "generated/VoltageStep_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/VoltageStep_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("Pin_definition.jl")
include("Ground_definition.jl")
include("CurrentSource_definition.jl")
include("VoltageStep_definition.jl")
include("VoltageSource_definition.jl")
include("VoltagePulse_definition.jl")
include("Capacitor_definition.jl")
include("Inductor_definition.jl")
include("Resistor_definition.jl")
include("RLCTransient_definition.jl")
include("RLCModel_definition.jl")
include("RLCModel2_definition.jl")
include("StepCurrent_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("Ground_experiment.jl")
include("CurrentSource_experiment.jl")
include("VoltageStep_experiment.jl")
include("VoltageSource_experiment.jl")
include("VoltagePulse_experiment.jl")
include("Capacitor_experiment.jl")
include("Inductor_experiment.jl")
include("Resistor_experiment.jl")
include("RLCModel_experiment.jl")
include("RLCModel2_experiment.jl")
include("StepCurrent_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        simple()
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("Ground_test.jl")
include("CurrentSource_test.jl")
include("VoltageStep_test.jl")
include("VoltageSource_test.jl")
include("VoltagePulse_test.jl")
include("Capacitor_test.jl")
include("Inductor_test.jl")
include("Resistor_test.jl")
include("RLCModel_test.jl")
include("RLCModel2_test.jl")
include("StepCurrent_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit

include("RLCModelParams_type.jl")",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 1`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 2`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 3`] = `
{
  "code": "@doc Markdown.doc"""
   Gain(; name, k)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`k\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function Gain(; name, k=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ k * u)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Gain

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Gain)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 4`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 5`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 6`] = `
{
  "code": "@doc Markdown.doc"""
   PlantModel(; name)

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function PlantModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named gain = SampleComponents.Gain(k=10))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, AnalysisPoint() ~ AnalysisPoint(u, :u_v, [gain.u]))
  push!(__eqs, connect(u, gain.u))
  push!(__eqs, gain.y ~ y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PlantModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PlantModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 7`] = `
{
  "code": "@kwdef mutable struct Initialize__Steady
end

function Base.setproperty!(value::Initialize__Steady, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Steady)
  println(io, "[Initialize__Steady] \\n ")
end

Base.copy(x::Initialize__Steady) = Initialize__Steady()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Steady) = [
]

export Initialize__Steady

@kwdef mutable struct Initialize__Fixed
    x::Real
end

function Base.setproperty!(value::Initialize__Fixed, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Fixed)
  println(io, "[Initialize__Fixed] \\n x=$(x.x)")
end

Base.copy(x::Initialize__Fixed) = Initialize__Fixed(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Fixed) = [
  model.x => pars.x,
]

export Initialize__Fixed
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "Initialize",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 8`] = `
{
  "code": """"Run model Hello from 0 to 10"""
function world()
  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export world",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 9`] = `
{
  "code": "@test try
    world()
    true
catch
    false
end
@testset "Running test case1 for Hello" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.x][1] ≈ 10
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 10`] = `
{
  "code": "@doc Markdown.doc"""
   Hello(; name, init, k)

A simple component model

This component demonstrates several features of the Dyad
modeling language.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`init\`         |                          | --  |   Initialize__Fixed(x=10) |
| \`k\`         |                          | 1/s  |   1 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | m  | 
"""
@component function Hello(; name, init=Initialize__Fixed(x=10), k=1)
  @assert (x > 0) | (x < 20) "x dropped below 0 or rose above 20"

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)), [state_priority = 10])

  ### Constants
  __constants = Any[]
  append!(__constants, @parameters (g::Float64 = 9.81))

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ -k * x)

  ### Control Structures
  if typeof(init)===Initialize__Steady
      push!(__initialization_eqs, D(x) ~ 0)
  else
      __defaults[x] = (init.x)
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Hello

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Hello)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 11`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 12`] = `
{
  "code": "@testset "Running test case1 for HelloTest" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = HelloTest()
  u0 = []
  prob = ODEProblem(model, u0, (0, 5))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.hello.x][1] ≈ 10
  @test sol[model.hello.x][end] ≈ 6
# Signals selected for regression testing: ["hello.x"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
  end
    if isfile("snapshots/HelloTest_case1_sig0.ref")
      ref = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.hello.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.hello.x])
        dfr = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.hello.x], width=2, label="Actual value of hello.x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of hello.x")
        plot!([df.t[1]], [10], seriestype=:scatter, label="Initial Condition for hello.x")
        plot!([df.t[end]], [6], seriestype=:scatter, label="Final Condition for hello.x")
        mkpath("comparisons")
        savefig("comparisons/HelloTest_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
    end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 13`] = `
{
  "code": "@doc Markdown.doc"""
   HelloTest(; name)
"""
@component function HelloTest(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named hello = SampleComponents.Hello())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HelloTest

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HelloTest)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 14`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 15`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 16`] = `
{
  "code": "@doc Markdown.doc"""
   Multi(; name, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`x\`         |                          | K  |   10 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`y\`         |                          | K  | 
"""
@component function Multi(; name, x=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x::Float64 = x))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(y) ~ (y - x))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Multi

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Multi)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 17`] = `
{
  "generated/Gain_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Gain(; name, k)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`k\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function Gain(; name, k=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ k * u)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Gain

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Gain)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Gain_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Gain_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HelloTest_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   HelloTest(; name)
"""
@component function HelloTest(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named hello = SampleComponents.Hello())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HelloTest

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HelloTest)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/HelloTest_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HelloTest_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@testset "Running test case1 for HelloTest" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = HelloTest()
  u0 = []
  prob = ODEProblem(model, u0, (0, 5))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.hello.x][1] ≈ 10
  @test sol[model.hello.x][end] ≈ 6
# Signals selected for regression testing: ["hello.x"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
  end
    if isfile("snapshots/HelloTest_case1_sig0.ref")
      ref = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.hello.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.hello.x])
        dfr = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.hello.x], width=2, label="Actual value of hello.x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of hello.x")
        plot!([df.t[1]], [10], seriestype=:scatter, label="Initial Condition for hello.x")
        plot!([df.t[end]], [6], seriestype=:scatter, label="Final Condition for hello.x")
        mkpath("comparisons")
        savefig("comparisons/HelloTest_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
    end
end
",
  "generated/Hello_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Hello(; name, init, k)

A simple component model

This component demonstrates several features of the Dyad
modeling language.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`init\`         |                          | --  |   Initialize__Fixed(x=10) |
| \`k\`         |                          | 1/s  |   1 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | m  | 
"""
@component function Hello(; name, init=Initialize__Fixed(x=10), k=1)
  @assert (x > 0) | (x < 20) "x dropped below 0 or rose above 20"

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)), [state_priority = 10])

  ### Constants
  __constants = Any[]
  append!(__constants, @parameters (g::Float64 = 9.81))

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ -k * x)

  ### Control Structures
  if typeof(init)===Initialize__Steady
      push!(__initialization_eqs, D(x) ~ 0)
  else
      __defaults[x] = (init.x)
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Hello

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Hello)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Hello_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""Run model Hello from 0 to 10"""
function world()
  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export world
",
  "generated/Hello_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@test try
    world()
    true
catch
    false
end
@testset "Running test case1 for Hello" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.x][1] ≈ 10
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end
",
  "generated/Initialize_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct Initialize__Steady
end

function Base.setproperty!(value::Initialize__Steady, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Steady)
  println(io, "[Initialize__Steady] \\n ")
end

Base.copy(x::Initialize__Steady) = Initialize__Steady()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Steady) = [
]

export Initialize__Steady

@kwdef mutable struct Initialize__Fixed
    x::Real
end

function Base.setproperty!(value::Initialize__Fixed, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Fixed)
  println(io, "[Initialize__Fixed] \\n x=$(x.x)")
end

Base.copy(x::Initialize__Fixed) = Initialize__Fixed(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Fixed) = [
  model.x => pars.x,
]

export Initialize__Fixed

",
  "generated/Multi_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Multi(; name, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`x\`         |                          | K  |   10 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`y\`         |                          | K  | 
"""
@component function Multi(; name, x=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x::Float64 = x))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(y) ~ (y - x))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Multi

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Multi)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Multi_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Multi_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/PlantModel_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   PlantModel(; name)

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function PlantModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named gain = SampleComponents.Gain(k=10))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, AnalysisPoint() ~ AnalysisPoint(u, :u_v, [gain.u]))
  push!(__eqs, connect(u, gain.u))
  push!(__eqs, gain.y ~ y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PlantModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PlantModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/PlantModel_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/PlantModel_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("Gain_definition.jl")
include("PlantModel_definition.jl")
include("Hello_definition.jl")
include("HelloTest_definition.jl")
include("Multi_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("Gain_experiment.jl")
include("PlantModel_experiment.jl")
include("Hello_experiment.jl")
include("HelloTest_experiment.jl")
include("Multi_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        world()
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("Gain_test.jl")
include("PlantModel_test.jl")
include("Hello_test.jl")
include("HelloTest_test.jl")
include("Multi_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit

include("Initialize_type.jl")",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 18`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 19`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 20`] = `
{
  "code": "@doc Markdown.doc"""
   Gain(; name, k)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`k\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function Gain(; name, k=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ k * u)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Gain

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Gain)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Gain",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 21`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 22`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 23`] = `
{
  "code": "@doc Markdown.doc"""
   PlantModel(; name)

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function PlantModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named gain = SampleComponents.Gain(k=10))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, AnalysisPoint() ~ AnalysisPoint(u, :u_v, [gain.u]))
  push!(__eqs, connect(u, gain.u))
  push!(__eqs, gain.y ~ y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PlantModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PlantModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "PlantModel",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 24`] = `
{
  "code": "@kwdef mutable struct Initialize__Steady
end

function Base.setproperty!(value::Initialize__Steady, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Steady)
  println(io, "[Initialize__Steady] \\n ")
end

Base.copy(x::Initialize__Steady) = Initialize__Steady()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Steady) = [
]

export Initialize__Steady

@kwdef mutable struct Initialize__Fixed
    x::Real
end

function Base.setproperty!(value::Initialize__Fixed, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Fixed)
  println(io, "[Initialize__Fixed] \\n x=$(x.x)")
end

Base.copy(x::Initialize__Fixed) = Initialize__Fixed(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Fixed) = [
  model.x => pars.x,
]

export Initialize__Fixed
",
  "key": {
    "kind": "type",
    "module": [],
    "name": "Initialize",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 25`] = `
{
  "code": """"Run model Hello from 0 to 10"""
function world()
  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export world",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 26`] = `
{
  "code": "@test try
    world()
    true
catch
    false
end
@testset "Running test case1 for Hello" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.x][1] ≈ 10
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 27`] = `
{
  "code": "@doc Markdown.doc"""
   Hello(; name, init, k)

A simple component model

This component demonstrates several features of the Dyad
modeling language.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`init\`         |                          | --  |   Initialize__Fixed(x=10) |
| \`k\`         |                          | 1/s  |   1 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | m  | 
"""
@component function Hello(; name, init=Initialize__Fixed(x=10), k=1)
  @assert (x > 0) | (x < 20) "x dropped below 0 or rose above 20"

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)), [state_priority = 10])

  ### Constants
  __constants = Any[]
  append!(__constants, @parameters (g::Float64 = 9.81))

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ -k * x)

  ### Control Structures
  if typeof(init)===Initialize__Steady
      push!(__initialization_eqs, D(x) ~ 0)
  else
      __defaults[x] = (init.x)
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Hello

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Hello)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Hello",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 28`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 29`] = `
{
  "code": "@testset "Running test case1 for HelloTest" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = HelloTest()
  u0 = []
  prob = ODEProblem(model, u0, (0, 5))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.hello.x][1] ≈ 10
  @test sol[model.hello.x][end] ≈ 6
# Signals selected for regression testing: ["hello.x"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
  end
    if isfile("snapshots/HelloTest_case1_sig0.ref")
      ref = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.hello.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.hello.x])
        dfr = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.hello.x], width=2, label="Actual value of hello.x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of hello.x")
        plot!([df.t[1]], [10], seriestype=:scatter, label="Initial Condition for hello.x")
        plot!([df.t[end]], [6], seriestype=:scatter, label="Final Condition for hello.x")
        mkpath("comparisons")
        savefig("comparisons/HelloTest_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
    end
end",
  "key": {
    "kind": "test",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 30`] = `
{
  "code": "@doc Markdown.doc"""
   HelloTest(; name)
"""
@component function HelloTest(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named hello = SampleComponents.Hello())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HelloTest

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HelloTest)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "HelloTest",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 31`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 32`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 33`] = `
{
  "code": "@doc Markdown.doc"""
   Multi(; name, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`x\`         |                          | K  |   10 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`y\`         |                          | K  | 
"""
@component function Multi(; name, x=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x::Float64 = x))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(y) ~ (y - x))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Multi

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Multi)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "Multi",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code for SampleComponents 34`] = `
{
  "generated/Gain_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Gain(; name, k)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`k\`         |                          | --  |    |

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function Gain(; name, k=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, y ~ k * u)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Gain

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Gain)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Gain_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Gain_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HelloTest_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   HelloTest(; name)
"""
@component function HelloTest(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named hello = SampleComponents.Hello())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export HelloTest

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(HelloTest)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/HelloTest_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/HelloTest_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@testset "Running test case1 for HelloTest" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = HelloTest()
  u0 = []
  prob = ODEProblem(model, u0, (0, 5))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.hello.x][1] ≈ 10
  @test sol[model.hello.x][end] ≈ 6
# Signals selected for regression testing: ["hello.x"]
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
    CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
  end
    if isfile("snapshots/HelloTest_case1_sig0.ref")
      ref = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
      [@test ref.expected[i] ≈ sol(ref.t[i], idxs=model.hello.x) for i in 1:length(ref.expected)]
      if get(ENV, "DYAD_COMPARISONS", "") !== ""
        df = DataFrame(t=sol[:t], actual=sol[model.hello.x])
        dfr = CSV.read("snapshots/HelloTest_case1_sig0.ref", DataFrame)
        plot(sol, idxs=[model.hello.x], width=2, label="Actual value of hello.x")
        scatter!(dfr.t, dfr.expected, mc=:red, ms=3, label="Expected value of hello.x")
        plot!([df.t[1]], [10], seriestype=:scatter, label="Initial Condition for hello.x")
        plot!([df.t[end]], [6], seriestype=:scatter, label="Final Condition for hello.x")
        mkpath("comparisons")
        savefig("comparisons/HelloTest_case1_sig0.png")
      end
    else
      mkpath("snapshots")
      CSV.write("snapshots/HelloTest_case1_sig0.ref", DataFrame(t=ref_times, expected=[sol(t, idxs=model.hello.x) for t in ref_times]))
    end
end
",
  "generated/Hello_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Hello(; name, init, k)

A simple component model

This component demonstrates several features of the Dyad
modeling language.

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`init\`         |                          | --  |   Initialize__Fixed(x=10) |
| \`k\`         |                          | 1/s  |   1 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`x\`         |                          | m  | 
"""
@component function Hello(; name, init=Initialize__Fixed(x=10), k=1)
  @assert (x > 0) | (x < 20) "x dropped below 0 or rose above 20"

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (k::Float64 = k))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (x(t)), [state_priority = 10])

  ### Constants
  __constants = Any[]
  append!(__constants, @parameters (g::Float64 = 9.81))

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(x) ~ -k * x)

  ### Control Structures
  if typeof(init)===Initialize__Steady
      push!(__initialization_eqs, D(x) ~ 0)
  else
      __defaults[x] = (init.x)
  end

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Hello

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Hello)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Hello_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""Run model Hello from 0 to 10"""
function world()
  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob)
end
export world
",
  "generated/Hello_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@test try
    world()
    true
catch
    false
end
@testset "Running test case1 for Hello" begin
  using CSV, DataFrames, Plots

  @mtkbuild model = Hello()
  u0 = []
  prob = ODEProblem(model, u0, (0, 10))
  sol = solve(prob, DefaultODEAlgorithm())
  @test SciMLBase.successful_retcode(sol)
  @test sol[model.x][1] ≈ 10
# Signals selected for regression testing: []
  ref_times = [sol(t, idxs=:t) for t in LinRange(sol[:t][1], sol[:t][end], 100)]
  if get(ENV, "DYAD_UPDATE_REFS", "") !== ""
    # If asked to update snapshots, write out reference data for all signals
    mkpath("snapshots")
  end
end
",
  "generated/Initialize_type.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@kwdef mutable struct Initialize__Steady
end

function Base.setproperty!(value::Initialize__Steady, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Steady)
  println(io, "[Initialize__Steady] \\n ")
end

Base.copy(x::Initialize__Steady) = Initialize__Steady()

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Steady) = [
]

export Initialize__Steady

@kwdef mutable struct Initialize__Fixed
    x::Real
end

function Base.setproperty!(value::Initialize__Fixed, name::Symbol, x)
  Base.setfield!(value, name, x)
end

function Base.show(io::IO, ::MIME"text/plain", x::Initialize__Fixed)
  println(io, "[Initialize__Fixed] \\n x=$(x.x)")
end

Base.copy(x::Initialize__Fixed) = Initialize__Fixed(x.x)

Base.broadcasted(::Type{Pair}, model::ODESystem, pars::Initialize__Fixed) = [
  model.x => pars.x,
]

export Initialize__Fixed

",
  "generated/Multi_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   Multi(; name, x)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`x\`         |                          | K  |   10 |

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`y\`         |                          | K  | 
"""
@component function Multi(; name, x=10)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (x::Float64 = x))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (y(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, D(y) ~ (y - x))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Multi

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Multi)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/Multi_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/Multi_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/PlantModel_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   PlantModel(; name)

## Connectors

 * \`u\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))
 * \`y\` - This connector represents a real signal as an output from a component ([\`RealOutput\`](@ref))
"""
@component function PlantModel(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables u(t), [input = true])
  append!(__vars, @variables y(t), [output = true])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named gain = SampleComponents.Gain(k=10))

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, AnalysisPoint() ~ AnalysisPoint(u, :u_v, [gain.u]))
  push!(__eqs, connect(u, gain.u))
  push!(__eqs, gain.y ~ y)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export PlantModel

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(PlantModel)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    
      </svg></div></div>""")
",
  "generated/PlantModel_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/PlantModel_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("Gain_definition.jl")
include("PlantModel_definition.jl")
include("Hello_definition.jl")
include("HelloTest_definition.jl")
include("Multi_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("Gain_experiment.jl")
include("PlantModel_experiment.jl")
include("Hello_experiment.jl")
include("HelloTest_experiment.jl")
include("Multi_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        world()
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("Gain_test.jl")
include("PlantModel_test.jl")
include("Hello_test.jl")
include("HelloTest_test.jl")
include("Multi_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit

include("Initialize_type.jl")",
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code that requires imports 1`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "MyRLC",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code that requires imports 2`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "MyRLC",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code that requires imports 3`] = `
{
  "code": "@doc Markdown.doc"""
   MyRLC(; name)
"""
@component function MyRLC(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.VoltageStep(Vf=24))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MyRLC

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MyRLC)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "MyRLC",
  },
}
`;

exports[`Test ModelingToolkit code generation Generate MTK code that requires imports 4`] = `
{
  "generated/MyRLC_definition.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


@doc Markdown.doc"""
   MyRLC(; name)
"""
@component function MyRLC(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named resistor = RLC.Resistor(R=100))
  push!(__systems, @named capacitor = RLC.Capacitor(C=0.001))
  push!(__systems, @named inductor = RLC.Inductor(L=1))
  push!(__systems, @named source = RLC.VoltageStep(Vf=24))
  push!(__systems, @named ground = RLC.Ground())

  ### Defaults
  __defaults = Dict()
  __defaults[capacitor.v] = (0)

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, connect(source.p, inductor.p))
  push!(__eqs, connect(inductor.n, resistor.p, capacitor.p))
  push!(__eqs, connect(resistor.n, ground.g, capacitor.n, source.n))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export MyRLC

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(MyRLC)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g filter="url(#drop-shadow)" transform="translate(300 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="500" transform="rotate(0, 0, 0)" fill="red" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">R=100</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">capacitor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-200 -300) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">inductor</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(-400 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">p</text>
<g transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">n</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">source</text>
    </svg></g>
<g filter="url(#drop-shadow)" transform="translate(0 500) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
    <style>
    text {
      transform-origin: center center;
    }
    </style><g transform="translate(0 0) scale(1.0) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
<g transform="translate(500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" id="a" width="1000" height="1000" viewBox="0 0 1000 1000"
><defs><style>.b {fill: none;}.b,.c {stroke: #b6b4cf;stroke-linejoin: round;stroke-width: 8px;}.c,.d {  fill: #fff;}.e {fill: #6e6ea1;}.e,.d {stroke-width: 0px;}</style>
  </defs><rect class="d" x="4" y="4" width="992" height="992" /><path class="e" d="M992,8v984H8V8h984M1000,0H0v1000h1000V0h0Z" /><path class="b"
    d="M361.83,226.44c-62.23-3.99-115.91,43.22-119.9,105.45-3.99,62.23,43.22,115.91,105.45,119.9,62.23,3.99,115.91-43.22,119.9-105.45,3.99-62.23-43.22-115.91-105.45-119.9ZM413.76,342.91c-2.09,32.67-30.28,57.46-62.95,55.36-32.67-2.1-57.46-30.28-55.36-62.95,2.09-32.67,30.28-57.46,62.95-55.36,32.67,2.09,57.45,30.28,55.36,62.95Z"
  /><circle class="b" cx="353.85" cy="682.11" r="80.62" /><circle class="b" cx="652.79" cy="644.36" r="52.47" /><polyline class="b" points="410.2 624.82 698.58 340.68 464.78 340.68" /><line class="b" x1="617.63" y1="609.81" x2="432.03" y2="420.13" /><circle class="c" cx="696.98" cy="340.44" r="54.47" />
</svg></g>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">g</text>
    <text x="500" y="1100" transform="rotate(0, 0, 600)" fill="black" font-size="200" font-weight="200" dominant-baseline="central" text-anchor="middle">ground</text>
    </svg></g>
    <path d="M 100 400 L 100 200 L 200 200 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 400 200 L 500 200 L 800 200 L 800 400 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 800 600 L 100 800 L 500 800 L 600 1000 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 600 1000 L 500 800 L 500 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <path d="M 500 600 L 800 800 L 500 800 L 100 600 " stroke-stroke="4" fill="transparent" stroke="blue" vector-effect="non-scaling-stroke"/>
    <circle cx="500" cy="800" r="5" fill="blue" />
      </svg></div></div>""")
",
  "generated/MyRLC_experiment.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/MyRLC_test.jl": "### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file



",
  "generated/definitions.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using ModelingToolkit: t_nounits as t
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)

D = Differential(t)

import RLC
@doc Markdown.doc"""
This connector represents an electrical pin with voltage and current as the potential and flow variables, respectively.
"""
@connector function __Dyad__Pin(; name)
  vars = @variables begin
    v(t), []
    i(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a thermal node with temperature and heat flow as the potential and flow variables, respectively.
"""
@connector function __Dyad__Node(; name)
  vars = @variables begin
    T(t), []
    Q(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a mechanical flange with position and force as the potential and flow variables, respectively.
"""
@connector function __Dyad__Flange(; name)
  vars = @variables begin
    s(t), []
    f(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end
@doc Markdown.doc"""
This connector represents a rotational spline with angle and torque as the potential and flow variables, respectively.
"""
@connector function __Dyad__Spline(; name)
  vars = @variables begin
    phi(t), []
    tau(t), [connect = Flow]
  end
  return ODESystem(Equation[], t, vars, []; name)
end

include("MyRLC_definition.jl")",
  "generated/experiments.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


include("MyRLC_experiment.jl")",
  "generated/precompilation.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using PrecompileTools: @setup_workload, @compile_workload

@setup_workload begin
    @compile_workload begin
        
    end
end
",
  "generated/tests.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
import Markdown
using OrdinaryDiffEqDefault
using RuntimeGeneratedFunctions
RuntimeGeneratedFunctions.init(@__MODULE__)



include("MyRLC_test.jl")",
  "generated/types.jl": "
### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file

using ModelingToolkit
",
}
`;

exports[`Test state machine parsing Parse state machine definition 1`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test state machine parsing Parse state machine definition 2`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test state machine parsing Parse state machine definition 3`] = `
{
  "code": """"
   VoltageSource(; name)

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))
 * \`V\` - This connector represents a real signal as an input to a component ([\`RealInput\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltageSource(; name)

  ### Symbolic Parameters
  __params = Any[]

  ### Variables
  __vars = Any[]
  append!(__vars, @variables V(t), [input = true])
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ V)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltageSource

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltageSource)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "VoltageSource",
  },
}
`;

exports[`Test state machine parsing Parse state machine definition 4`] = `
{
  "code": "",
  "key": {
    "kind": "experiment",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;

exports[`Test state machine parsing Parse state machine definition 5`] = `
{
  "code": "",
  "key": {
    "kind": "test",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;

exports[`Test state machine parsing Parse state machine definition 6`] = `
{
  "code": """"
   VoltagePulse(; name, Vbase, Vpulse, start, stop)

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| \`Vbase\`         |                          | V  |    |
| \`Vpulse\`         |                          | V  |    |
| \`start\`         |                          | s  |    |
| \`stop\`         |                          | s  |    |

## Connectors

 * \`p\` - ([\`Pin\`](@ref))
 * \`n\` - ([\`Pin\`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| \`v\`         |                          | V  | 
| \`i\`         |                          | A  | 
"""
@component function VoltagePulse(; name, Vbase=nothing, Vpulse=nothing, start=nothing, stop=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (Vbase::Float64 = Vbase))
  append!(__params, @parameters (Vpulse::Float64 = Vpulse))
  append!(__params, @parameters (start::Float64 = start))
  append!(__params, @parameters (stop::Float64 = stop))

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (v(t)))
  append!(__vars, @variables (i(t)), [guess = 0.1])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named p = RLC.Pin())
  push!(__systems, @named n = RLC.Pin())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, v ~ p.v - n.v)
  push!(__eqs, i ~ p.i)
  push!(__eqs, p.i + n.i ~ 0)
  push!(__eqs, v ~ ifelse((t > start) & (t < stop), Vpulse, Vbase))

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export VoltagePulse

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(VoltagePulse)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.2 0.2) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="#d2dbed" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
<g  transform="translate(500 0) scale(0.2 0.2) rotate(90)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
shape-rendering="geometricPrecision" text-rendering="geometricPrecision" transform-origin="center center">
<rect rx="0" ry="0" width="1000" height="1000" fill="blue" stroke="blue" stroke-width="8"
    vector-effect="non-scaling-stroke"></rect>
</svg></g>
      </svg></div></div>""")",
  "key": {
    "kind": "definition",
    "module": [],
    "name": "VoltagePulse",
  },
}
`;
